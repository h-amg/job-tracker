// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum ApplicationStatus {
  Active
  Interview
  Offer
  Rejected
  Withdrawn
  Archived
}

enum JobType {
  FullTime
  PartTime
  Contract
  Internship
}

enum NotificationType {
  DeadlineReminder
  InterviewReminder
  CoverLetterGenerated
  StatusUpdate
}

enum NotificationStatus {
  Pending
  Completed
  Failed
}

enum WorkflowStatus {
  Running
  Completed
  Failed
  Cancelled
}

model Application {
  id               String            @id @default(cuid())
  company          String
  role             String
  jobDescription   String
  resumeUrl        String?
  coverLetterUrl   String?
  status           ApplicationStatus @default(Active)
  deadline         DateTime
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  notes            String?
  interviewDate    DateTime?
  salary           String?
  location         String?
  jobType          JobType?          @default(FullTime)
  workflowId       String?           @unique

  // Relations
  timelineEvents   TimelineEvent[]
  notifications    Notification[]
  workflowExecution WorkflowExecution?

  @@map("applications")
}

model TimelineEvent {
  id            String            @id @default(cuid())
  applicationId String
  status        ApplicationStatus
  note          String?
  timestamp     DateTime          @default(now())

  // Relations
  application   Application       @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("timeline_events")
}

model Notification {
  id            String            @id @default(cuid())
  applicationId String
  type          NotificationType
  title         String
  message       String
  status        NotificationStatus @default(Pending)
  timestamp     DateTime          @default(now())
  read          Boolean           @default(false)

  // Relations
  application   Application       @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model WorkflowExecution {
  id            String         @id @default(cuid())
  applicationId String         @unique
  workflowId    String
  runId         String
  status        WorkflowStatus @default(Running)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  application   Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("workflow_executions")
}
